[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Yash Surange",
    "section": "",
    "text": "ExperienceEducation\n\n\n\n\nUniv.AI, Bengaluru, India\nTeaching Assitant\n\n\nApril 2022 - Present\n\n\n\nI have been working on developing course content and helping the instructors to teach the course materials to 90+ students.\nMy work comprises of building coding exercises, clarifying student doubts.\n\n\n\nAthenahealth, Bengaluru, India\nAssociate Member of Technical Staff\n\n\nAugust 2021 - July 2022\n\n\n\nI worked on automation of test scripts for company‚Äôs core products: athenahFlow and athenaPractice.\n\n\n\nAthenahealth, Bengaluru, India\nIntern\n\n\nJanuary 2021 - July 2021\n\n\n\nI contributed to the migration of performance engineering scripts from LoadRunner to JMeter for both: athenaPractice and athenaFlow.\n\n\n\n\n\nRVCE, Bengaluru, India\nBachelor of Technology in Computer Science | GPA: 8.2/10\n\n\nJuly 2021"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to my universe !!",
    "section": "",
    "text": "LinkedIn\n  \n  \n    \n     GitHub\n  \n  \n    \n     Twitter\n  \n  \n    \n     Kaggle\n  \n  \n    \n     Email\n  \n\n      \nI have experience working in industry as well academic environments. My work in industry primarily dealt with automation. In the academic setting, I have experience working as a teaching assistant wherein I assisted in delivering content to 90+ students.\nI am currently working as a teaching assistant and I do all this intending to help people understand concepts and at the same time get more clarity on the AI concepts.\nRead more about me here."
  },
  {
    "objectID": "index.html#latest-blogs",
    "href": "index.html#latest-blogs",
    "title": "Welcome to my universe !!",
    "section": "Latest Blogs",
    "text": "Latest Blogs\nClick here to check out more blogs.\n\n\n\n\n\n\n\n\n\n\n\n\n\nDecoding paper - Parameter-Efficient Transfer Learning for NLP\n\n\n\n\n\n\n\n\n\n\n\n\nApr 9, 2023\n\n\nYash Surange\n\n\n\n\n\n\n  \n\n\n\n\nContinous learning- polishing basics with karpathy\n\n\n\n\n\n\n\n\n\n\n\n\nFeb 25, 2023\n\n\nYash Surange\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Blogs",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n¬†\n\n\n\n\n\nPaper explanation\n\n\n\n\n\n\n\nApr 9, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFundamentals of neural networks\n\n\n\n\n\n\n\nFeb 25, 2023\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "talks.html",
    "href": "talks.html",
    "title": "Talks",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/2023-02-25-Continous_learning.html",
    "href": "posts/2023-02-25-Continous_learning.html",
    "title": "Continous learning- polishing basics with karpathy",
    "section": "",
    "text": "I am currently following along with karpathy, completing the video series and completing the exercises in order to polish my fundamentals in neural networks. This has helped me gain a deeper understanding of backpropagation, batchnormalization and it helped me better understand the internals of pytorch. My journey can be found on my github repository"
  },
  {
    "objectID": "posts/2023-02-25-nn_with_karpathy/2023-02-25-Continous_learning.html",
    "href": "posts/2023-02-25-nn_with_karpathy/2023-02-25-Continous_learning.html",
    "title": "Continous learning- polishing basics with karpathy",
    "section": "",
    "text": "I will continue to following along with karpathy, completing the video series and completing the exercises in order to polish my fundamentals in neural networks. This has helped me gain a deeper understanding of backpropagation, batchnormalization and it helped me better understand the internals of pytorch. My journey can be found on my github repository"
  },
  {
    "objectID": "posts/2023-04-9- Paper_implementation_1_adapter/adapter.html",
    "href": "posts/2023-04-9- Paper_implementation_1_adapter/adapter.html",
    "title": "Decoding paper - Parameter-Efficient Transfer Learning for NLP",
    "section": "",
    "text": "I will be discussing about the paper : Parameter efficient transfer learning for NLP. I will be going through each section of the paper and will be writing my understanding of the same. If you find any problems, don‚Äôt hesitate to contact me.\n\n\n1 Lets begin üèÅ\n\n1.0.1 Abstract\nAuthors note that fine tuning of pretrained models is an efficient way of transfer learning in NLP. Transfer learning becomes parameter inefficient when the number of downstream tasks increase as for each task, a new model has to be created. To make this parameter efficient, authors propose to use adapter modules for efficient transfer learning.\nFor each new task, adapters add very few trainable parameters and the parameters of the pretrained model remain unchanged. To demonstrate the effectiveness of this approach, the authors transfer BERT to 26 text classification tasks and achieve within 0.4% of the performance after full fine tuning. Only 3.6% parameters were added per task.\n\n1.0.1.1 Points to note:\n\nThere are different methods of transfer learning in NLP. These are as follows:\n\n1. Training the entire architecture (Full fine tuning): The pretrained model is trained in entirety. All the trainable parameters are updated during backpropogation.\n\n2. Training some layers and freezing others: Freezing of the initial layers and training of the later layers. In this case, we have to experimentally determine which layers to be frozen.\n\n3. Freezing the entire architecture: We freeze all the layers of the architecture and add new layers on top of them. We train only the additional layers.\n\n\n1.0.2 Introduction\nIn this paper, the authors have targeted the online setting. In this setting tasks arrive in a stream. A better way to understand this is by taking an example. The example is that of google translate. The process involves detection of language, translation of language. These tasks have to be performed on the go. Logically, we would want models to require minimum number of extra parameters to adapt to new task. We also want to make sure that information about the tasks is not lost when we train on new tasks."
  },
  {
    "objectID": "posts/2023-04-9- Paper_implementation_1_adapter/adapter.html#lets-begin",
    "href": "posts/2023-04-9- Paper_implementation_1_adapter/adapter.html#lets-begin",
    "title": "Decoding paper - Parameter-Efficient Transfer Learning for NLP",
    "section": "1 Lets begin üèÅ",
    "text": "1 Lets begin üèÅ\n\n1.1 Abstract\nAuthors note that fine tuning of pretrained models is an efficient way of transfer learning in NLP. Transfer learning becomes parameter inefficient when the number of downstream tasks increase as for each task, a new model has to be created. To make this parameter efficient, authors propose to use adapter modules for efficient transfer learning.\nFor each new task, adapters add very few trainable parameters and the parameters of the pretrained model remain unchanged. To demonstrate the effectiveness of this approach, the authors transfer BERT to 26 text classification tasks and achieve within 0.4% of the performance after full fine tuning. Only 3.6% parameters were added per task.\n\n1.1.1 Points to note:\n\nThere are different methods of transfer learning in NLP. These are as follows:\n\nTraining the entire architecture (Full fine tuning): The pretrained model is trained in entirety. All the trainable parameters are updated during backpropogation.\nTraining some layers and freezing others: Freezing of the initial layers and training of the later layers. In this case, we have to experimentally determine which layers to be frozen.\nFreezing the entire architecture: We freeze all the layers of the architecture and add new layers on top of them. We train only the additional layers.\n\n\n\n1.2 Introduction\nIn this paper, the authors have targeted the online setting. In this setting tasks arrive in a stream. A better way to understand this is by taking an example. The example is that of google translate. The process involves detection of language, translation of language. These tasks have to be performed on the go. Logically, we would want models to require minimum number of extra parameters to adapt to new task. We also want to make sure that information about the tasks is not lost when we train on new tasks."
  }
]